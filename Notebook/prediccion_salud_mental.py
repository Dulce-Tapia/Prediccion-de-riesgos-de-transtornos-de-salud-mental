# -*- coding: utf-8 -*-
"""Prediccion_Salud_Mental.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RVGjO4aD9LTJanA4U4vY6tOgRo0OZAP9

# 🧠 Predicción de riesgo de trastornos de salud mental

Este proyecto tiene como objetivo predecir si una persona podría requerir tratamiento de salud mental,
basándose en factores sociales y laborales, utilizando un dataset de encuestas en la industria tecnológica.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

"""## 📥 Carga del dataset"""

# Subir archivo desde tu computadora
from google.colab import files
uploaded = files.upload()

# Cargar datos
df = pd.read_csv("survey.csv")

"""## 🧽 Limpieza y preprocesamiento"""

# Revisar columnas y valores nulos
df.info()
df.isnull().sum()

# Tratar valores nulos
df = df.dropna()

# Cambiar formato de cadenas de caracteres
df['Gender'] = df['Gender'].str.lower().str.strip()

# Crear grupos
df['Gender'] = df['Gender'].replace({
    'male': 'Male', 'm': 'Male', 'man': 'Male', 'cis male': 'Male',
    'female': 'Female', 'f': 'Female', 'woman': 'Female', 'cis female': 'Female',
    'trans female': 'Transgender', 'trans male': 'Transgender',
    'genderqueer': 'Other', 'non-binary': 'Other', 'agender': 'Other',
})

# Consolidar: Male, Female, Transgender, Other
df['Gender'] = df['Gender'].apply(lambda x: x.title() if x in ['Male', 'Female', 'Transgender', 'Other'] else 'Other')

"""## 📊 Análisis exploratorio"""

# Distriución de la variale ojetivo
sns.countplot(data=df, x='treatment')
plt.title("¿Ha recibido un tratamiento de salud mental?")
plt.xlabel('Tratamiento')
plt.ylabel('Cantidad')
plt.show()

# Distribución de género
sns.countplot(data=df, x='Gender')
plt.title("Distribución por género")
plt.xticks(rotation=45)
plt.show()

# Distribución de edades
sns.histplot(data=df,x='Age',kde=True,bins=30)
plt.title("Distribución de edades")
plt.show()

# Relación entre edad y tratamiento
sns.boxplot(data=df, x='treatment', y='Age')
plt.title("Edad según tratamiento")
plt.xlabel("Tratamiento")
plt.ylabel("Edad")
plt.show()

# Tratamiento por género
sns.countplot(data=df, x='Gender', hue='treatment')
plt.title("Tratamiento de salud mental por género")
plt.xticks(rotation=45)
plt.show()

# Antecedentes familiares y tratamiento
sns.countplot(data=df, x='family_history', hue='treatment')
plt.title("Influencia de antecedentes familiares")
plt.show()

# Impacto del entorno laboral
sns.countplot(data=df, x='work_interfere', hue='treatment')
plt.title("¿El trabajo interfiere con la salud mental?")
plt.xticks(rotation=45)
plt.show()

"""## 🤖 Modelado y predicción"""

# Separar variables predictoras y objetivo
df_encoded = pd.get_dummies(df, drop_first=True)
X = df_encoded.drop("treatment_Yes", axis=1)
y = df_encoded["treatment_Yes"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Modelo
model = RandomForestClassifier()
model.fit(X_train, y_train)

# Predicción y evaluación
y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True)